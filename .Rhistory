#theme(axis.text.x=element_text(colour = "black", size=rel(0.5), angle=45, margin=margin(0.5,0,1,0, "lines")))
ggplot(OAF, aes(x=OAF$Gene, y=OAF$AlleleFreq)) + #, color=AF$Direction_of_effect   #color=NewV.ER$CellLine to split into two groups per x axis category
geom_violin(trim=FALSE) +
#stat_summary(aes(group=AF$Direction_of_effect), fun.data = mean_sdl, geom="pointrange", fill="black", color="black", position = position_dodge(width = .9)) + #aes(group=NewV.ER$CellLine), position = position_dodge(width = .9  to split into two groups per x axis category
#geom_dotplot(binaxis='y', stackdir ='center', dotsize=0.1, position = position_dodge(width = .9)) +
geom_jitter(shape=20, cex = 2, position=position_jitterdodge(0.05, dodge.width = .5), aes(colour = OAF$Mut_Type)) + ###this seems to be the best option
#scale_color_manual(values=c("#00ffff", "#ff00ff")) + #category colors
#scale_color_manual(values=c("#0000FF", "#FFFF00")) +
# scale_x_discrete(limits=c("Up", "Down")) + #change order of items in the graph
labs(title="Allele Frequencies of Common Mutations in ER+ Luminal Breast Tumors", x="Gene", y = "Frequency of Gene Mutant Allele In The Tumor")
#theme(axis.text.x=element_text(colour = "black", size=rel(0.5), angle=45, margin=margin(0.5,0,1,0, "lines")))
OAF = read.delim("/Users/staufferkm/Desktop/AlleleFreqforCommonMuts.TCGAModelSamples.txt", header = T, sep = "\t", quote = "",  as.is = T)
unique(OAF$MutationType)
for (row in 1:nrow(OAF)) {
if (OAF[row, "MutationType"] == "Missense_Mutation") {
OAF[row, "Mut_Type"] = "MS"
}
if (OAF[row, "MutationType"] == "Nonsense_Mutation") {
OAF[row, "Mut_Type"] = "NS"
}
if ((OAF[row, "MutationType"] == "Frame_Shift_Del") || (OAF[row, "MutationType"] == "Frame_Shift_Ins")){
OAF[row, "Mut_Type"] = "FS"
}
if ((OAF[row, "MutationType"] == "Splice_Site") || (OAF[row, "MutationType"] == "Splice_Site")) {
OAF[row, "Mut_Type"] = "Splice"
}
if ((OAF[row, "MutationType"] == "In_Frame_Ins")  || (OAF[row, "MutationType"] == "In_Frame_Del")) {
OAF[row, "Mut_Type"] = "In_Frame_Ins.Del"
}
}
OAF$Mut_Type
ggplot(OAF, aes(x=OAF$Gene, y=OAF$AlleleFreq)) + #, color=AF$Direction_of_effect   #color=NewV.ER$CellLine to split into two groups per x axis category
geom_violin(trim=FALSE) +
#stat_summary(aes(group=AF$Direction_of_effect), fun.data = mean_sdl, geom="pointrange", fill="black", color="black", position = position_dodge(width = .9)) + #aes(group=NewV.ER$CellLine), position = position_dodge(width = .9  to split into two groups per x axis category
#geom_dotplot(binaxis='y', stackdir ='center', dotsize=0.1, position = position_dodge(width = .9)) +
geom_jitter(shape=20, cex = 2, position=position_jitterdodge(0.05, dodge.width = .5), aes(colour = OAF$Mut_Type)) + ###this seems to be the best option
#scale_color_manual(values=c("#00ffff", "#ff00ff")) + #category colors
#scale_color_manual(values=c("#0000FF", "#FFFF00")) +
# scale_x_discrete(limits=c("Up", "Down")) + #change order of items in the graph
labs(title="Allele Frequencies of Common Mutations in ER+ Luminal Breast Tumors", x="Gene", y = "Frequency of Gene Mutant Allele In The Tumor")
#theme(axis.text.x=element_text(colour = "black", size=rel(0.5), angle=45, margin=margin(0.5,0,1,0, "lines")))
unique(OAF$MutationType)
which(OAF$Mut_Type == "NA")
which(OAF$Mut_Type == "Splice")
which(OAF$Mut_Type == "NA")
unique(OAF$Gene)
OAF = read.delim("/Users/staufferkm/Desktop/AlleleFreqforCommonMuts.TCGAModelSamples.txt", header = T, sep = "\t", quote = "",  as.is = T)
head(OAF)
OAF = read.delim("/Users/staufferkm/Desktop/AlleleFreqforCommonMuts.TCGAModelSamples.txt", header = T, sep = "\t", quote = "",  as.is = T)
head(OAF)
OAF = read.delim("/Users/staufferkm/Desktop/AlleleFreqforCommonMuts.TCGAModelSamples.txt", header = T, sep = "\t", quote = "",  as.is = T)
head(OAF)
OAF = read.delim("/Users/staufferkm/Desktop/AlleleFreqforCommonMuts.TCGAModelSamples.txt", header = T, sep = "\t", quote = "",  as.is = T)
head(OAF)
unique(OAF$MutationType)
which(OAF$MutationType == "gain")
which(OAF$MutationType == "diploid")
which(OAF$MutationType == "shallowdel")
OAF[291,]
OAF = read.delim("/Users/staufferkm/Desktop/AlleleFreqforCommonMuts.TCGAModelSamples.txt", header = T, sep = "\t", quote = "",  as.is = T)
head(OAF)
unique(OAF$MutationType)
OAF$Mut_Type = "NA"
for (row in 1:nrow(OAF)) {
if (OAF[row, "MutationType"] == "Missense_Mutation") {
OAF[row, "Mut_Type"] = "MS"
}
if (OAF[row, "MutationType"] == "Nonsense_Mutation") {
OAF[row, "Mut_Type"] = "NS"
}
if ((OAF[row, "MutationType"] == "Frame_Shift_Del") || (OAF[row, "MutationType"] == "Frame_Shift_Ins")){
OAF[row, "Mut_Type"] = "FS"
}
if ((OAF[row, "MutationType"] == "Splice_Site") || (OAF[row, "MutationType"] == "Splice_Site")) {
OAF[row, "Mut_Type"] = "Splice"
}
if ((OAF[row, "MutationType"] == "In_Frame_Ins")  || (OAF[row, "MutationType"] == "In_Frame_Del")) {
OAF[row, "Mut_Type"] = "In_Frame_Ins.Del"
}
}
OAF$Mut_Type
ggplot(OAF, aes(x=OAF$Gene, y=OAF$AlleleFreq)) + #, color=AF$Direction_of_effect   #color=NewV.ER$CellLine to split into two groups per x axis category
geom_violin(trim=FALSE) +
#stat_summary(aes(group=AF$Direction_of_effect), fun.data = mean_sdl, geom="pointrange", fill="black", color="black", position = position_dodge(width = .9)) + #aes(group=NewV.ER$CellLine), position = position_dodge(width = .9  to split into two groups per x axis category
#geom_dotplot(binaxis='y', stackdir ='center', dotsize=0.1, position = position_dodge(width = .9)) +
geom_jitter(shape=20, cex = 2, position=position_jitterdodge(0.05, dodge.width = .5), aes(colour = OAF$Mut_Type)) + ###this seems to be the best option
#scale_color_manual(values=c("#00ffff", "#ff00ff")) + #category colors
#scale_color_manual(values=c("#0000FF", "#FFFF00")) +
# scale_x_discrete(limits=c("Up", "Down")) + #change order of items in the graph
labs(title="Allele Frequencies of Common Mutations in ER+ Luminal Breast Tumors", x="Gene", y = "Frequency of Gene Mutant Allele In The Tumor")
#theme(axis.text.x=element_text(colour = "black", size=rel(0.5), angle=45, margin=margin(0.5,0,1,0, "lines")))
OAF$Gene
columns(OAF)
columnnames(OAF)
columnnames(OAF)
colnames(OAF)
OAF$Center
OAF$COSMIC
OAF$CopyNum
OAF = read.delim("/Users/staufferkm/Desktop/AlleleFreqforCommonMuts.TCGAModelSamples.txt", header = T, sep = "\t", quote = "",  as.is = T)
head(OAF)
OAF$MS
OAF$VS
which(OAF$MS != "Untested")
which(OAF$MS != "Untested")
unique(OAF$CopyNum)
OAF = read.delim("/Users/staufferkm/Desktop/AlleleFreqforCommonMuts.TCGAModelSamples.txt", header = T, sep = "\t", quote = "",  as.is = T)
head(OAF)
unique(OAF$MutationType)
OAF$Mut_Type = "NA"
for (row in 1:nrow(OAF)) {
if (OAF[row, "MutationType"] == "Missense_Mutation") {
OAF[row, "Mut_Type"] = "MS"
}
if (OAF[row, "MutationType"] == "Nonsense_Mutation") {
OAF[row, "Mut_Type"] = "NS"
}
if ((OAF[row, "MutationType"] == "Frame_Shift_Del") || (OAF[row, "MutationType"] == "Frame_Shift_Ins")){
OAF[row, "Mut_Type"] = "FS"
}
if ((OAF[row, "MutationType"] == "Splice_Site") || (OAF[row, "MutationType"] == "Splice_Site")) {
OAF[row, "Mut_Type"] = "Splice"
}
if ((OAF[row, "MutationType"] == "In_Frame_Ins")  || (OAF[row, "MutationType"] == "In_Frame_Del")) {
OAF[row, "Mut_Type"] = "In_Frame_Ins.Del"
}
}
OAF$Mut_Type
ggplot(OAF, aes(x=OAF$Gene, y=OAF$AlleleFreq)) + #, color=AF$Direction_of_effect   #color=NewV.ER$CellLine to split into two groups per x axis category
geom_violin(trim=FALSE) +
#stat_summary(aes(group=AF$Direction_of_effect), fun.data = mean_sdl, geom="pointrange", fill="black", color="black", position = position_dodge(width = .9)) + #aes(group=NewV.ER$CellLine), position = position_dodge(width = .9  to split into two groups per x axis category
#geom_dotplot(binaxis='y', stackdir ='center', dotsize=0.1, position = position_dodge(width = .9)) +
geom_jitter(shape=20, cex = 2, position=position_jitterdodge(0.05, dodge.width = .5), aes(colour = OAF$Mut_Type)) + ###this seems to be the best option
#scale_color_manual(values=c("#00ffff", "#ff00ff")) + #category colors
#scale_color_manual(values=c("#0000FF", "#FFFF00")) +
# scale_x_discrete(limits=c("Up", "Down")) + #change order of items in the graph
labs(title="Allele Frequencies of Common Mutations in ER+ Luminal Breast Tumors", x="Gene", y = "Frequency of Gene Mutant Allele In The Tumor")
#theme(axis.text.x=element_text(colour = "black", size=rel(0.5), angle=45, margin=margin(0.5,0,1,0, "lines")))
colnames(OAF)
OAF$COSMIC
OAF$MS
OAF$VS
colnames(OAF)
OAF$Center
OAF$Ref
OAF$AlleleFreqNormal
OAF$VariantReadsNormal
OAF$RefReadsNormal
OAF$NumMutinSample
OAF$Exon
OAF$HGVSc
OAF$gnomAD
OAF$ClinVar.ID
OAF$dbSNP
OAF$Gene
OAF$Mut_Type
OAF$HGVSc
OAF$Exon
OAF$NumMutinSample
OAF$gnomAD
colnames(OAF)
OAF$Gene
OAF = read.delim("/Users/staufferkm/Desktop/AlleleFreqforCommonMuts.TCGAModelSamples.txt", header = T, sep = "\t", quote = "",  as.is = T)
head(OAF)
OAF$Mut_Type = "NA"
for (row in 1:nrow(OAF)) {
if (OAF[row, "MutationType"] == "Missense_Mutation") {
OAF[row, "Mut_Type"] = "MS"
}
if (OAF[row, "MutationType"] == "Nonsense_Mutation") {
OAF[row, "Mut_Type"] = "NS"
}
if ((OAF[row, "MutationType"] == "Frame_Shift_Del") || (OAF[row, "MutationType"] == "Frame_Shift_Ins")){
OAF[row, "Mut_Type"] = "FS"
}
if ((OAF[row, "MutationType"] == "Splice_Site") || (OAF[row, "MutationType"] == "Splice_Site")) {
OAF[row, "Mut_Type"] = "Splice"
}
if ((OAF[row, "MutationType"] == "In_Frame_Ins")  || (OAF[row, "MutationType"] == "In_Frame_Del")) {
OAF[row, "Mut_Type"] = "In_Frame_Ins.Del"
}
}
OAF$Mut_Type
ggplot(OAF, aes(x=OAF$Gene, y=OAF$AlleleFreq)) + #, color=AF$Direction_of_effect   #color=NewV.ER$CellLine to split into two groups per x axis category
geom_violin(trim=FALSE) +
#stat_summary(aes(group=AF$Direction_of_effect), fun.data = mean_sdl, geom="pointrange", fill="black", color="black", position = position_dodge(width = .9)) + #aes(group=NewV.ER$CellLine), position = position_dodge(width = .9  to split into two groups per x axis category
#geom_dotplot(binaxis='y', stackdir ='center', dotsize=0.1, position = position_dodge(width = .9)) +
geom_jitter(shape=20, cex = 2, position=position_jitterdodge(0.05, dodge.width = .5), aes(colour = OAF$Mut_Type)) + ###this seems to be the best option
#scale_color_manual(values=c("#00ffff", "#ff00ff")) + #category colors
#scale_color_manual(values=c("#0000FF", "#FFFF00")) +
# scale_x_discrete(limits=c("Up", "Down")) + #change order of items in the graph
labs(title="Allele Frequencies of Common Mutations in ER+ Luminal Breast Tumors", x="Gene", y = "Frequency of Gene Mutant Allele In The Tumor")
#theme(axis.text.x=element_text(colour = "black", size=rel(0.5), angle=45, margin=margin(0.5,0,1,0, "lines")))
setwd("~/Desktop/Kim/")
require(RColorBrewer)
require(pcaMethods)
require(qvalue)
require(limma)
require(marray)
require(sva)
require(Gviz)
require(genefu)
library(ggplot2)
library(scales)
require(gplots)
require(reshape2)
library(plyr)
library(dplyr)
V = read.table("/Users/staufferkm/Desktop/PeakCategoryTable_fin_Aug2019.txt", header = T, quote = "", as.is = T, sep = "\t")
MAF = read.delim("/Users/staufferkm/Desktop/AllTCGA.MBC.MBCP.MKSCC_MLL3MutantAlleleFractionsPerTumor.txt", header = T, sep = "\t", quote = "",  as.is = T)
OAF = read.delim("/Users/staufferkm/Desktop/AlleleFreqforCommonMuts.TCGAModelSamples.txt", header = T, sep = "\t", quote = "",  as.is = T)
unique(OAF$MutationType)
OAF$Mut_Type = "NA"
for (row in 1:nrow(OAF)) {
if (OAF[row, "MutationType"] == "Missense_Mutation") {
OAF[row, "Mut_Type"] = "MS"
}
if (OAF[row, "MutationType"] == "Nonsense_Mutation") {
OAF[row, "Mut_Type"] = "NS"
}
if ((OAF[row, "MutationType"] == "Frame_Shift_Del") || (OAF[row, "MutationType"] == "Frame_Shift_Ins")){
OAF[row, "Mut_Type"] = "FS"
}
if ((OAF[row, "MutationType"] == "Splice_Site") || (OAF[row, "MutationType"] == "Splice_Site")) {
OAF[row, "Mut_Type"] = "Splice"
}
if ((OAF[row, "MutationType"] == "In_Frame_Ins")  || (OAF[row, "MutationType"] == "In_Frame_Del")) {
OAF[row, "Mut_Type"] = "In_Frame_Ins.Del"
}
}
OAF$Mut_Type
which(OAF$Mut_Type =="NA")
OAF[220,]
OAF[c(220, 371, 544, 5450,]
OAF[c(220, 371, 544, 545),]
OAF[c(220, 371, 544, 545),]
unique(OAF$MutationType)
OAF$Mut_Type = "NA"
for (row in 1:nrow(OAF)) {
if (OAF[row, "MutationType"] == "Missense_Mutation") {
OAF[row, "Mut_Type"] = "MS"
}
if (OAF[row, "MutationType"] == "Nonsense_Mutation") {
OAF[row, "Mut_Type"] = "NS"
}
if ((OAF[row, "MutationType"] == "Frame_Shift_Del") || (OAF[row, "MutationType"] == "Frame_Shift_Ins")){
OAF[row, "Mut_Type"] = "FS"
}
if ((OAF[row, "MutationType"] == "Splice_Site") || (OAF[row, "MutationType"] == "Splice_Region")) {
OAF[row, "Mut_Type"] = "Splice"
}
if ((OAF[row, "MutationType"] == "In_Frame_Ins")  || (OAF[row, "MutationType"] == "In_Frame_Del")) {
OAF[row, "Mut_Type"] = "In_Frame_Ins.Del"
}
}
OAF$Mut_Type
unique(OAF$Mut_Type)
ggplot(OAF, aes(x=OAF$Gene, y=OAF$AlleleFreq)) + #, color=AF$Direction_of_effect   #color=NewV.ER$CellLine to split into two groups per x axis category
geom_violin(trim=FALSE) +
#stat_summary(aes(group=AF$Direction_of_effect), fun.data = mean_sdl, geom="pointrange", fill="black", color="black", position = position_dodge(width = .9)) + #aes(group=NewV.ER$CellLine), position = position_dodge(width = .9  to split into two groups per x axis category
#geom_dotplot(binaxis='y', stackdir ='center', dotsize=0.1, position = position_dodge(width = .9)) +
geom_jitter(shape=20, cex = 2, position=position_jitterdodge(0.05, dodge.width = .5), aes(colour = OAF$Mut_Type)) + ###this seems to be the best option
#scale_color_manual(values=c("#00ffff", "#ff00ff")) + #category colors
#scale_color_manual(values=c("#0000FF", "#FFFF00")) +
# scale_x_discrete(limits=c("Up", "Down")) + #change order of items in the graph
labs(title="Allele Frequencies of Common Mutations in ER+ Luminal Breast Tumors", x="Gene", y = "Frequency of Gene Mutant Allele In The Tumor")
unique(MAF$MutationType)
MAF$Mut_Type = "NA"
for (row in 1:nrow(MAF)) {
if (MAF[row, "MutationType"] == "Missense_Mutation") {
MAF[row, "Mut_Type"] = "MS"
}
if (MAF[row, "MutationType"] == "Nonsense_Mutation") {
MAF[row, "Mut_Type"] = "NS"
}
if ((MAF[row, "MutationType"] == "Frame_Shift_Del") || (MAF[row, "MutationType"] == "Frame_Shift_Ins")){
MAF[row, "Mut_Type"] = "FS"
}
if ((MAF[row, "MutationType"] == "Splice_Site") || (MAF[row, "MutationType"] == "Splice_Region")) {
MAF[row, "Mut_Type"] = "Splice"
}
if ((MAF[row, "MutationType"] == "In_Frame_Ins")  || (MAF[row, "MutationType"] == "In_Frame_Del")) {
MAF[row, "Mut_Type"] = "In_Frame_Ins.Del"
}
}
unique(MAF$Mut_Type)
colnames(MAF)
unique(MAF$Mutation_Type)
MAF$Mut_Type = "NA"
for (row in 1:nrow(MAF)) {
if (MAF[row, "Mutation_Type"] == "Missense_Mutation") {
MAF[row, "Mut_Type"] = "MS"
}
if (MAF[row, "Mutation_Type"] == "Nonsense_Mutation") {
MAF[row, "Mut_Type"] = "NS"
}
if ((MAF[row, "Mutation_Type"] == "Frame_Shift_Del") || (MAF[row, "Mutation_Type"] == "Frame_Shift_Ins")){
MAF[row, "Mut_Type"] = "FS"
}
if ((MAF[row, "Mutation_Type"] == "Splice_Site") || (MAF[row, "Mutation_Type"] == "Splice_Region")) {
MAF[row, "Mut_Type"] = "Splice"
}
if ((MAF[row, "Mutation_Type"] == "In_Frame_Ins")  || (MAF[row, "Mutation_Type"] == "In_Frame_Del")) {
MAF[row, "Mut_Type"] = "In_Frame_Ins.Del"
}
}
unique(MAF$Mut_Type)
ggplot(MAF, aes(x=MAF$Study, y=MAF$AlleleFreq)) + #, color=AF$Direction_of_effect   #color=NewV.ER$CellLine to split into two groups per x axis category
geom_violin(trim=FALSE) +
#stat_summary(aes(group=AF$Direction_of_effect), fun.data = mean_sdl, geom="pointrange", fill="black", color="black", position = position_dodge(width = .9)) + #aes(group=NewV.ER$CellLine), position = position_dodge(width = .9  to split into two groups per x axis category
#geom_dotplot(binaxis='y', stackdir ='center', dotsize=0.1, position = position_dodge(width = .9)) +
geom_jitter(shape=20, cex = 2, position=position_jitterdodge(0.05, dodge.width = .5), aes(colour = MAF$Mut_Type)) + ###this seems to be the best option
#scale_color_manual(values=c("#00ffff", "#ff00ff")) + #category colors
#scale_color_manual(values=c("#0000FF", "#FFFF00")) +
# scale_x_discrete(limits=c("Up", "Down")) + #change order of items in the graph
labs(title="Allele Frequency of MLL3 Mutation in Breast Tumors", x="Gene", y = "Frequency of MLL3 Mutant Allele In The Tumor")
#theme(axis.text.x=element_text(colour = "black", size=rel(0.5), angle=45, margin=margin(0.5,0,1,0, "lines")))
ggplot(MAF, aes(x=MAF$Study, y=MAF$Allele_Freq)) + #, color=AF$Direction_of_effect   #color=NewV.ER$CellLine to split into two groups per x axis category
geom_violin(trim=FALSE) +
#stat_summary(aes(group=AF$Direction_of_effect), fun.data = mean_sdl, geom="pointrange", fill="black", color="black", position = position_dodge(width = .9)) + #aes(group=NewV.ER$CellLine), position = position_dodge(width = .9  to split into two groups per x axis category
#geom_dotplot(binaxis='y', stackdir ='center', dotsize=0.1, position = position_dodge(width = .9)) +
geom_jitter(shape=20, cex = 2, position=position_jitterdodge(0.05, dodge.width = .5), aes(colour = MAF$Mut_Type)) + ###this seems to be the best option
#scale_color_manual(values=c("#00ffff", "#ff00ff")) + #category colors
#scale_color_manual(values=c("#0000FF", "#FFFF00")) +
# scale_x_discrete(limits=c("Up", "Down")) + #change order of items in the graph
labs(title="Allele Frequency of MLL3 Mutation in Breast Tumors", x="Gene", y = "Frequency of MLL3 Mutant Allele In The Tumor")
ggplot(MAF, aes(x=MAF$Study, y=MAF$Allele_Freq)) + #, color=AF$Direction_of_effect   #color=NewV.ER$CellLine to split into two groups per x axis category
geom_violin(trim=FALSE) +
#stat_summary(aes(group=AF$Direction_of_effect), fun.data = mean_sdl, geom="pointrange", fill="black", color="black", position = position_dodge(width = .9)) + #aes(group=NewV.ER$CellLine), position = position_dodge(width = .9  to split into two groups per x axis category
#geom_dotplot(binaxis='y', stackdir ='center', dotsize=0.1, position = position_dodge(width = .9)) +
geom_jitter(shape=20, cex = 2, position=position_jitterdodge(0.05, dodge.width = .5), aes(colour = MAF$Mut_Type)) + ###this seems to be the best option
#scale_color_manual(values=c("#00ffff", "#ff00ff")) + #category colors
#scale_color_manual(values=c("#0000FF", "#FFFF00")) +
# scale_x_discrete(limits=c("Up", "Down")) + #change order of items in the graph
labs(title="Allele Frequency of MLL3 Mutation in Breast Tumors", x="Gene", y = "Frequency of MLL3 Mutant Allele In The Tumor") +
theme(axis.text.x=element_text(colour = "black", size=rel(0.5), angle=45, margin=margin(0.5,0,1,0, "lines")))
load("/Users/staufferkm/Desktop/gitrepos/fasttt/SanDiegoPoliceRipaStopsTrafficOnly/SanDiegoPoliceRipaStopsTrafficOnly_model_mixture.RData")
obs
library(rstan)
library(dplyr)
library(parallel)
library(readr)
library(tidyr)
library(gridExtra)
library(scales)
library(xtable)
library(lubridate)
library(stringr)
library(boot)
library(jsonlite)
library(knitr)
library(lubridate)
library(lazyeval)
library(lutz)
library(magrittr)
library(maps)
library(parallel)
library(purrr)
library(rlang)
library(rmarkdown)
library(rgdal)
library(rstan)
library(scales)
library(sp)
library(splines)
library(suncalc)
library(zoo)
library(lubridate)
library(lutz)
library(tidyverse)
library(assertr)
library(broom)
library(digest)
library(fs)
library(functional)
library(getopt)
library(here)
library(housingData)
source('constants_and_libraries.R')
source('data_processing.R')
source('run_mixture_mcmc.R')
setwd('/Users/staufferkm/Desktop/gitrepos/fasttt/')
source('constants_and_libraries.R')
source('constants_and_libraries.R')
source('data_processing.R')
source('run_mixture_mcmc.R')
# Looking at frisk decision. See mixture_analysis.R.
message("\n\nComparing old and new frisk results!")
compare_old_and_new_results(filenames = c('nyc_stop_and_frisk_search_decision'),
old_model_name = old_frisk_model_name,
new_model_name = new_frisk_model_name)
new_model = 'nyc_stop_and_frisk_search_decision_model_mixture.RData'
load(paste0(base_output_dir, new_model))
message("\n\nRemaking signal, PPC, and threshold plots for frisk data!")
hit_rate_ppc(obs, post, filename = 'figures/search_decision_hit_rate_ppc.pdf')
search_rate_ppc(obs, post, filename = 'figures/search_decision_search_rate_ppc.pdf')
make_threshold_plot(obs,
var = 'frisk threshold',
filename = 'figures/stop_and_frisk_search_thresholds.pdf',
size_column = 'num_stops',
breaks = c(.02, .05, .1),
limits = c(.01, .2))
# Analysis of stop rates.
message(sprintf("Analyzing stop rates!"))
compare_old_and_new_results(filenames = c('nyc_stop_and_frisk'),
old_model_name = old_stop_model_name,
new_model_name = new_stop_model_name)
load(paste0(base_output_dir, 'nyc_stop_and_frisk_multinomial_stop_and_frisk.RData'))
obs$num_stops = obs$race_base_pop # we size circles (for stop threshold plots and PPCs) by the size of the race population in the precinct
message("\n\nRemaking signal, PPC, and threshold plots for stop data!")
make_threshold_plot(obs,
var = 'stop threshold',
filename = 'figures/stop_and_frisk_stop_thresholds.pdf',
size_column = 'race_base_pop',
breaks = c(.01, .1, .5),
limits = c(.0002, 1))
hit_rate_ppc(obs, post, 'figures/stop_decision_hit_rate_ppc.pdf')
make_multinomial_search_rate_ppc(obs, post, size_column = 'race_base_pop', 'figures/stop_decision_search_rate_ppc.pdf')
run_perturbation_tests() # this function comes from mixture_analysis.R.
# Make placebo robustness plots. Only do this for search decision (doesn't make sense for stop decision).
message("Making placebo plots!")
source('placebo_tests.R')
make_placebo_plots('search_decision')
# Make substratification robustness plots.
message("Making substratification plots!")
source('substratification_robustness_checks.R')
collect_all_substratification_thresholds_into_dataframe()
all_substratification_thresholds = read_csv(all_substratification_thresholds_fn)
make_combined_plot_of_substratifications(all_substratification_thresholds, 'search_decision')
make_combined_plot_of_substratifications(all_substratification_thresholds, 'stop_decision')
message('Making heterogeneous threshold plots!')
source('simulate_data.R')
plot_all_noise_levels('search_decision')
plot_all_noise_levels('stop_decision')
message("Successfully remade all plots and tables.")
make_threshold_plot = function(obs, var, filename, size_column, breaks, limits, log_scale = TRUE) {
#Checked.
obs = data.frame(obs)
obs$size_column = obs[,size_column] # this column is used to size circles.
df = obs %>%
filter(driver_race == 'White') %>%
right_join(obs %>% filter(driver_race != 'White'), by='location_variable') %>%
rename(white_threshold=thresholds.x, minority_threshold = thresholds.y, minority_n = size_column.y, minority = driver_race.y)
p = ggplot(df) +
geom_point(aes(x=white_threshold, y=minority_threshold, size=minority_n), shape=1, alpha=0.6) +
facet_grid(.~minority) +
geom_abline(slope=1, intercept=0, linetype='dashed') +
scale_size_area(max_size=10) +
guides(size=FALSE, color=FALSE) +
our_theme()
if(log_scale){
p = p +
scale_x_log10(paste('White'   , var),  expand=c(0,0), limits = limits, breaks = breaks) +
scale_y_log10(paste('Minority', var), expand=c(0,0), limits = limits, breaks = breaks)
}else{
p = p +
scale_x_continuous(paste('White'   , var),  expand=c(0,0), limits = limits, breaks = breaks) +
scale_y_continuous(paste('Minority', var), expand=c(0,0), limits = limits, breaks = breaks)
}
message(sprintf("Made threshold plot and saved to %s", filename))
ggsave(p, filename = filename, width = 8, height = 4)
return(p)
}
var
filename
View(get_stan_data)
summary(obs$thresholds)
hist(obs$thresholds)
hist(obs$thresholds, breaks = 100)
make_threshold_plot(obs,
var = 'search threshold',
filename = 'figures/searchthresholds_sandiego_TrafficOnly.pdf',
size_column = 'num_stops',
breaks = c(0.1, 0.2, 0.3.),
limits = c(0, 0.37))
make_threshold_plot(obs, var = 'search threshold', filename = 'figures/searchthresholds_sandiego_TrafficOnly.pdf', size_column = 'num_stops', breaks = c(0.1, 0.2, 0.3.), limits = c(0, 0.37))
make_threshold_plot(obs, var = 'search threshold', filename = 'figures/searchthresholds_sandiego_TrafficOnly.pdf', size_column = 'num_stops', breaks = c(0.1, 0.2, 0.3), limits = c(0, 0.37))
make_threshold_plot(obs, var = 'search threshold', filename = 'figures/searchthresholds_sandiego_TrafficOnly.pdf', size_column = 'num_stops', breaks = c(0.1, 0.2, 0.3), limits = c(0.001, 0.37))
make_threshold_plot(obs, var = 'search threshold', filename = 'figures/searchthresholds_sandiego_TrafficOnly.pdf', size_column = 'num_stops', breaks = c(0.1, 0.2, 0.3), limits = c(0.001, 0.37), log_scale = FALSE)
make_threshold_plot(obs, var = 'search threshold', filename = 'figures/searchthresholds_sandiego_TrafficOnly.pdf', size_column = 'num_stops', breaks = c(0.25, 0.3, 0.35), limits = c(0.25, 0.37), log_scale = FALSE)
make_threshold_plot(obs, var = 'search threshold', filename = 'figures/searchthresholds_sandiego_TrafficOnly.pdf', size_column = 'num_stops', breaks = c(0.2, 0.25, 0.3, 0.35, 0.4), limits = c(0.2, 0.4), log_scale = FALSE)
which(is.na(obs$location_variable
))
which(is.na(obs$num_stops)
)
which(is.na(obs$thresholds)
)
obs
make_threshold_plot(obs, var = 'search threshold', filename = 'figures/searchthresholds_sandiego_TrafficOnly.pdf', size_column = 'num_stops', breaks = c(0.25, 0.3, 0.35, 0.4), limits = c(0.23, 0.4), log_scale = FALSE)
our_theme = function() {
# Set the base size
theme_bw(base_size=15) +
theme(
# Remove the title
plot.title=element_blank(),
# Make the background white
panel.background=element_rect(fill='white', colour='white'),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
# Minimize margins
plot.margin=unit(c(0.2, 0.2, 0.2, 0.2), "cm"),
panel.spacing=unit(0.25, "lines"),
# Tiny space between axis labels and tick labels
axis.title.x=element_text(margin=ggplot2::margin(t=6.0)),
axis.title.y=element_text(margin=ggplot2::margin(r=6.0)),
# Simplify the legend
legend.key=element_blank(),
legend.background=element_rect(fill='transparent'),
legend.title=element_blank()
)
}
make_threshold_plot(obs, var = 'search threshold', filename = 'figures/searchthresholds_sandiego_TrafficOnly.pdf', size_column = 'num_stops', breaks = c(0.25, 0.3, 0.35, 0.4), limits = c(0.23, 0.4), log_scale = FALSE)
